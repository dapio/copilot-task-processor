generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Agent {
  id                     String                   @id @default(cuid())
  name                   String                   @unique
  role                   String
  description            String?
  capabilities           String
  isActive               Boolean                  @default(true)
  currentWorkload        Float                    @default(0.0)
  metadata               String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  receivedCommunications AgentCommunication[]     @relation("ReceiverAgent")
  sentCommunications     AgentCommunication[]     @relation("SenderAgent")
  decisions              AgentDecision[]
  instructionConfigs     AgentInstructionConfig[]
  ruleChecks             InstructionRuleCheck[]
  workflowSteps          WorkflowStep[]

  @@index([name])
  @@index([role])
  @@index([isActive])
}

model AgentCommunication {
  id          String   @id @default(cuid())
  fromAgentId String
  toAgentId   String
  messageType String
  content     String
  priority    String   @default("medium")
  isRead      Boolean  @default(false)
  metadata    String?
  timestamp   DateTime @default(now())
  toAgent     Agent    @relation("ReceiverAgent", fields: [toAgentId], references: [id], onDelete: Cascade)
  fromAgent   Agent    @relation("SenderAgent", fields: [fromAgentId], references: [id], onDelete: Cascade)

  @@index([fromAgentId])
  @@index([toAgentId])
  @@index([messageType])
  @@index([timestamp])
}

model AgentDecision {
  id           String   @id @default(cuid())
  agentId      String
  decisionType String
  context      String
  options      String
  chosenOption String
  reasoning    String
  confidence   Float
  outcome      String?
  isReversed   Boolean  @default(false)
  timestamp    DateTime @default(now())
  agent        Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([decisionType])
  @@index([timestamp])
}

model Workflow {
  id          String         @id @default(cuid())
  name        String
  description String?
  type        String
  status      String         @default("draft")
  priority    String         @default("medium")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  startedAt   DateTime?
  completedAt DateTime?
  projectId   String?
  project     Project?       @relation(fields: [projectId], references: [id])
  steps       WorkflowStep[]

  @@index([name])
  @@index([type])
  @@index([status])
}

model WorkflowStep {
  id              String                 @id @default(cuid())
  workflowId      String
  stepNumber      Int
  name            String
  description     String?
  assignedAgentId String?
  status          String                 @default("pending")
  startedAt       DateTime?
  completedAt     DateTime?
  inputs          String?
  outputs         String?
  errors          String?
  ruleChecks      InstructionRuleCheck[]
  assignedAgent   Agent?                 @relation(fields: [assignedAgentId], references: [id])
  workflow        Workflow               @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, stepNumber])
  @@index([workflowId])
  @@index([assignedAgentId])
  @@index([status])
}

model Project {
  id          String                 @id @default(cuid())
  name        String
  description String?
  type        String
  status      String                 @default("planning")
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  startedAt   DateTime?
  completedAt DateTime?
  metadata    String?
  ruleChecks  InstructionRuleCheck[]
  feedback    UserFeedback[]
  workflows   Workflow[]

  @@index([name])
  @@index([type])
  @@index([status])
}

model UserFeedback {
  id           String    @id @default(cuid())
  projectId    String?
  feedbackType String
  title        String
  description  String
  priority     String    @default("medium")
  status       String    @default("open")
  createdAt    DateTime  @default(now())
  resolvedAt   DateTime?
  metadata     String?
  project      Project?  @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([feedbackType])
  @@index([status])
}

model AgentInstruction {
  id               String                   @id @default(cuid())
  name             String
  category         String
  targetRole       String?
  priority         Int                      @default(100)
  isActive         Boolean                  @default(true)
  version          String                   @default("1.0.0")
  title            String
  description      String
  instructions     String
  examples         String?
  violations       String?
  enforcementLevel String                   @default("warning")
  autoApply        Boolean                  @default(false)
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  createdBy        String?
  agentConfigs     AgentInstructionConfig[]
  ruleChecks       InstructionRuleCheck[]

  @@unique([name, version])
  @@index([category])
  @@index([targetRole])
  @@index([priority])
  @@index([isActive])
}

model AgentInstructionConfig {
  id             String           @id @default(cuid())
  agentId        String
  instructionId  String
  isEnabled      Boolean          @default(true)
  customSettings String?
  assignedAt     DateTime         @default(now())
  lastApplied    DateTime?
  instruction    AgentInstruction @relation(fields: [instructionId], references: [id], onDelete: Cascade)
  agent          Agent            @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, instructionId])
  @@index([agentId])
  @@index([instructionId])
}

model InstructionRuleCheck {
  id             String           @id @default(cuid())
  instructionId  String
  agentId        String
  projectId      String?
  workflowStepId String?
  ruleType       String
  checkResult    String
  findings       String?
  autoFixed      Boolean          @default(false)
  checkedAt      DateTime         @default(now())
  workflowStep   WorkflowStep?    @relation(fields: [workflowStepId], references: [id])
  project        Project?         @relation(fields: [projectId], references: [id])
  agent          Agent            @relation(fields: [agentId], references: [id], onDelete: Cascade)
  instruction    AgentInstruction @relation(fields: [instructionId], references: [id], onDelete: Cascade)

  @@index([instructionId])
  @@index([agentId])
  @@index([checkResult])
  @@index([checkedAt])
}

model BestPractice {
  id           String         @id @default(cuid())
  parentId     String?
  title        String
  category     String
  subcategory  String?
  tags         String?
  description  String
  rule         String
  rationale    String
  goodExamples String?
  badExamples  String?
  resources    String?
  difficulty   String         @default("medium")
  impact       String         @default("medium")
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  parent       BestPractice?  @relation("BestPracticeHierarchy", fields: [parentId], references: [id])
  children     BestPractice[] @relation("BestPracticeHierarchy")

  @@index([category])
  @@index([subcategory])
  @@index([difficulty])
  @@index([impact])
  @@index([isActive])
  @@index([parentId])
}
